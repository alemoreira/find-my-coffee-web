{"version":3,"sources":["services/api.js","services/establishment_service.js","components/Establishment/index.js","App.js","reportWebVitals.js","index.js"],"names":["Api","axios","create","baseURL","EstablishmentsService","index","latitude","longitude","get","show","place_id","LeftBar","styled","div","Title","h1","Paragraph","p","Image","img","Establishment","props","useState","establishment","setEstablishment","a","EstablishmentService","place","response","data","result","useEffect","getEstablishmentInformations","photos","src","photo_reference","process","alt","name","opening_hours","open_now","weekday_text","map","schedule","formatted_address","App","setLatitude","setLongitude","locations","setLocations","selected","setSelected","navigator","geolocation","getCurrentPosition","position","coords","loadCoffeeShops","error","alert","results","setCurrentLocation","googleMapsApiKey","mapContainerStyle","height","width","zoom","center","lat","lng","item","console","log","geometry","location","icon","title","animation","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21a5227d.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst localhost_url = \"http://localhost:3001/api/v1\";\nconst heroku_url = \"https://nameless-ridge-86180.herokuapp.com/api/v1\";\n\nconst Api = axios.create({ baseURL: heroku_url });\n\nexport default Api;\n","import Api from \"./api\";\n\nconst EstablishmentsService = {\n  index: (latitude, longitude) =>\n    Api.get(`/google_stores?latitude=${latitude}&longitude=${longitude}`),\n  show: (place_id) => Api.get(`/google_stores/${place_id}`),\n};\n\nexport default EstablishmentsService;\n","import React, { useState, useEffect } from \"react\";\nimport EstablishmentService from \"../../services/establishment_service\";\nimport styled from \"styled-components\";\n\nconst LeftBar = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  width: 250px;\n  position: absolute;\n  color: white;\n  background-color: rgba(10, 10, 10, 0.9);\n  padding: 20px;\n`;\n\nconst Title = styled.h1`\n  font-size: 20px;\n  color: rgba(220, 110, 50, 0.7);\n`;\n\nconst Paragraph = styled.p`\n  font-size: 13px;\n  line-height: 14px;\n`;\n\nconst Image = styled.img`\n  height: 150px;\n  width: 100%;\n`;\n\nconst Establishment = (props) => {\n  const [establishment, setEstablishment] = useState([]);\n\n  const { REACT_APP_GOOGLE_API_KEY } = process.env;\n\n  useEffect(() => {\n    getEstablishmentInformations();\n  }, [props.place]);\n\n  async function getEstablishmentInformations() {\n    try {\n      const response = await EstablishmentService.index(props.place.place_id);\n      setEstablishment(response.data.result);\n    } catch (error) {\n      setEstablishment([]);\n    }\n  }\n\n  return (\n    <LeftBar>\n      {establishment.photos ? (\n        <Image\n          src={`https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&> photoreference=${establishment.photos[0].photo_reference}&sensor=false& key=${REACT_APP_GOOGLE_API_KEY}`}\n          alt=\"Store perfil\"\n        />\n      ) : (\n        <Image src=\"/images/no_photo.jpg\" alt=\"No perfil\" />\n      )}\n      <Title>{establishment.name}</Title>\n      {establishment.opening_hours ? (\n        <div>\n          {establishment.opening_hours.open_now === true ? \"Aberto\" : \"Fechado\"}\n\n          <hr />\n\n          {establishment.opening_hours.weekday_text.map((schedule, index) => {\n            return <Paragraph key={index}>{schedule}</Paragraph>;\n          })}\n        </div>\n      ) : (\n        \"Não há cadastros de horário de funcionamento.\"\n      )}\n      <hr />\n\n      <Paragraph>{establishment.formatted_address}</Paragraph>\n    </LeftBar>\n  );\n};\n\nexport default Establishment;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport Establishment from \"./components/Establishment\";\n// import NearstCoffees from \"./components/NearstCoffees\";\n\nimport EstablishmentsService from \"./services/establishment_service\";\n\nfunction App() {\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [locations, setLocations] = useState([]);\n  const [selected, setSelected] = useState({});\n\n  const { REACT_APP_GOOGLE_API_KEY } = process.env;\n\n  useEffect(() => {\n    setCurrentLocation();\n  }, []);\n\n  async function setCurrentLocation() {\n    await navigator.geolocation.getCurrentPosition(\n      function (position) {\n        setLatitude(position.coords.latitude);\n        setLongitude(position.coords.longitude);\n        loadCoffeeShops();\n      },\n      function (error) {\n        alert(\"Habilite a localização para usar esse APP\");\n      }\n    );\n  }\n\n  async function loadCoffeeShops() {\n    const response = await EstablishmentsService.index(latitude, longitude);\n    setLocations(response.data.results);\n  }\n\n  return (\n    <Fragment>\n      <LoadScript googleMapsApiKey={REACT_APP_GOOGLE_API_KEY}>\n        <GoogleMap\n          mapContainerStyle={{ height: \"100vh\", width: \"100%\" }}\n          zoom={15}\n          center={{ lat: latitude, lng: longitude }}\n        >\n          {locations.map((item, index) => {\n            console.log({\n              lat: item.geometry.location.lat,\n              lng: item.geometry.location.lng,\n            });\n            return (\n              <Marker\n                key={index}\n                icon=\"/find-my-coffee-web/images/coffee-pin.png\"\n                title={item.name}\n                animation=\"4\"\n                position={{\n                  lat: item.geometry.location.lat,\n                  lng: item.geometry.location.lng,\n                }}\n                onClick={() => setSelected(item)}\n              />\n            );\n          })}\n          {selected.place_id && <Establishment place={selected} />}\n          <Marker\n            key=\"my location\"\n            icon=\"/find-my-coffee-web/images/my-location-pin.png\"\n            title=\"Seu local\"\n            animation=\"2\"\n            position={{ lat: latitude, lng: longitude }}\n          />\n\n          {/* {latitude != 0 && longitude != 0 && (\n            <NearstCoffees latitude={latitude} longitude={longitude} />\n          )} */}\n        </GoogleMap>\n      </LoadScript>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}